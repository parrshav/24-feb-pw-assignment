Pandas Advance-1Assignment Questions 
Assignment 
Q1. List any five functions of the pandas library with execution. 
read_csv(): Used to read data from a CSV file into a Pandas DataFrame.
import pandas as pd

# Read a CSV file into a DataFrame
df = pd.read_csv('data.csv')
head(): Displays the first few rows of a DataFrame, which is useful for quick data inspection.
# Display the first 5 rows of the DataFrame
df.head()

describe(): Generates summary statistics of the DataFrame, such as count, mean, min, max, etc., for each numeric column.
# Generate summary statistics for numeric columns
df.describe()
plot(): Creates various types of plots (e.g., line plot, bar plot, histogram) to visualize data within the DataFrame.
import matplotlib.pyplot as plt

# Create a bar plot of 'Age' column
df['Age'].plot(kind='bar')
plt.xlabel('Index')
plt.ylabel('Age')
plt.show()

groupby(): Allows you to group the data based on one or more columns and perform operations on these groups.
# Group data by 'Category' and calculate the mean of 'Value' within each group
grouped = df.groupby('Category')['Value'].mean()

Q2. Given a Pandas DataFrame df with columns 'A', 'B', and 'C', write a Python function to re-index the  DataFrame with a new index that starts from 1 and increments by 2 for each row. 


Q3. You have a Pandas DataFrame df with a column named 'Values'. Write a Python function that  iterates over the DataFrame and calculates the sum of the first three values in the 'Values' column. The  function should print the sum to the console. 
import pandas as pd

def calculate_sum_of_first_three_values(df):
  values_column = df['Values']
   first_three_values = values_column.head(3)
    sum_of_first_three_values = first_three_values.sum()
  print("Sum of the first three values:", sum_of_first_three_values)
For example, if the 'Values' column of df contains the values [10, 20, 30, 40, 50], your function should  calculate and print the sum of the first three values, which is 60. 
Q4. Given a Pandas DataFrame df with a column 'Text', write a Python function to create a new column  'Word_Count' that contains the number of words in each row of the 'Text' column. 
import pandas as pd


data = {'Text': ["This is a sample sentence.", "Count the words in this text.", "Pandas DataFrame example."]}
df = pd.DataFrame(data)


df['Word_Count'] = df['Text'].apply(lambda x: len(x.split()))


print(df)


Q5. How are DataFrame.size() and DataFrame.shape() different? 
DataFrame.size:
DataFrame.size returns the total number of elements in the DataFrame, which is equivalent to the product of the number of rows and the number of columns.
It returns a single integer value representing the total size of the DataFrame.
DataFrame.shape:
DataFrame.shape returns a tuple representing the dimensions of the DataFrame. It provides information about the number of rows and columns in the DataFrame.
The tuple returned has two elements: the first element is the number of rows, and the second element is the number of columns.

Q6. Which function of pandas do we use to read an excel file? 
In Pandas, you can use the read_excel() function to read data from an Excel file (.xlsx or other Excel-compatible formats) and create a DataFrame from it.

Q7. You have a Pandas DataFrame df that contains a column named 'Email' that contains email  addresses in the format 'username@domain.com'. Write a Python function that creates a new column  'Username' in df that contains only the username part of each email address. 
import pandas as pd


data = {'Email': ['user1@example.com', 'user2@example.org', 'user3@example.net']}
df = pd.DataFrame(data)


df['Username'] = df['Email'].str.split('@').str[0]


print(df)


The username is the part of the email address that appears before the '@' symbol. For example, if the  email address is 'john.doe@example.com', the 'Username' column should contain 'john.doe'. Your  function should extract the username from each email address and store it in the new 'Username'  column. 
Q8. You have a Pandas DataFrame df with columns 'A', 'B', and 'C'. Write a Python function that selects  all rows where the value in column 'A' is greater than 5 and the value in column 'B' is less than 10. The  function should return a new DataFrame that contains only the selected rows. 
For example, if df contains the following values: 
   A   B   C 
0  3   5   1 
1  8   2   7 
2  6   9   4 
3  2   3   5 
4  9   1   2
Data Science Masters 
Assignment 
Your function should select the following rows:   A   B   C 
1  8   2   7 
4  9   1   2 
The function should return a new DataFrame that contains only the selected rows. 
import pandas as pd

def select_rows(df):

    selected_rows = df[(df['A'] > 5) & (df['B'] < 10)]
    return selected_rows


data = {'A': [3, 8, 6, 2, 9],
        'B': [5, 2, 9, 3, 1],
        'C': [1, 7, 4, 5, 2]}
df = pd.DataFrame(data)


selected_df = select_rows(df)


print(selected_df)


Q9. Given a Pandas DataFrame df with a column 'Values', write a Python function to calculate the mean,  median, and standard deviation of the values in the 'Values' column. 
import pandas as pd


data = {'Values': [10, 20, 30, 40, 50]}
df = pd.DataFrame(data)


mean_value = df['Values'].mean()
median_value = df['Values'].median()
std_deviation = df['Values'].std()


print("Mean:", mean_value)
print("Median:", median_value)
print("Standard Deviation:", std_deviation)


Q10. Given a Pandas DataFrame df with a column 'Sales' and a column 'Date', write a Python function to  create a new column 'MovingAverage' that contains the moving average of the sales for the past 7 days  for each row in the DataFrame. The moving average should be calculated using a window of size 7 and  should include the current day. 
.import pandas as pd


data = {'Date': pd.date_range(start='2023-09-01', periods=10, freq='D'),
        'Sales': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}
df = pd.DataFrame(data)


df = df.sort_values(by='Date')


df['MovingAverage'] = df['Sales'].rolling(window=7, min_periods=1).mean()


print(df)


Q11. You have a Pandas DataFrame df with a column 'Date'. Write a Python function that creates a new  column 'Weekday' in the DataFrame. The 'Weekday' column should contain the weekday name (e.g.  Monday, Tuesday) corresponding to each date in the 'Date' column. 
For example, if df contains the following values: 
         Date 
0  2023-01-01 
1  2023-01-02 
2  2023-01-03 
3  2023-01-04 
4  2023-01-05 
Your function should create the following DataFrame: 
         Date    Weekday 
0  2023-01-01    Sunday 
1  2023-01-02     Monday 
2  2023-01-03    Tuesday 
3  2023-01-04    Wednesday 
4  2023-01-05    Thursday 
The function should return the modified DataFrame.
Data Science Masters 
Assignment 
Q12. Given a Pandas DataFrame df with a column 'Date' that contains timestamps, write a Python  function to select all rows where the date is between '2023-01-01' and '2023-01-31'. 
import pandas as pd

def select_rows_between_dates(df):
       df['Date'] = pd.to_datetime(df['Date'])
    
      start_date = '2023-01-01'
    end_date = '2023-01-31'
    
       selected_rows = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
    
    return selected_rows

data = {'Date': ['2023-01-05', '2023-01-15', '2023-02-10', '2023-01-25'],
        'Value': [10, 20, 30, 40]}
df = pd.DataFrame(data)

selected_df = select_rows_between_dates(df)


print(selected_df)


Q13. To use the basic functions of pandas, what is the first and foremost necessary library that needs to  be imported?
The first and foremost library that needs to be imported to use the basic functions of Pandas is, of course, the Pandas library itself
Note:  Create your assignment in Jupyter notebook and upload it in GitHub & share that github   repository link through your dashboard. Make sure the repository is public. 
Data Science Masters 
